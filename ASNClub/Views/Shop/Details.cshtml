@using System.Security.Claims;
@using ASNClub.Data.Models;
@using ASNClub.Infrastructure.Extensions;
@using ASNClub.ViewModels.Product;
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole<Guid>> RoleManager
@model ProductDetailsViewModel;
@{
    ViewBag.Title = $"{Model.Type} for {Model.Make} {Model.Model} details";
    string url = Model.ImgUrls[0];
    
    var discountPrice = decimal.Zero;
    if (Model.Discount.IsDiscount)
    {
        discountPrice = Model.Price - ((Model.Price * (decimal)Model.Discount.DiscountRate) / 100);
    }
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<style>
    .image-container {
        position: relative;
        width: 120px;
        height: 120px;
        overflow: hidden;
        border-radius: 2px;
        margin-inline-end: 5px;
    }

        .image-container img {
            width: 100%;
            height: auto;
            object-fit: cover;
        }

    #large-image-container {
        margin-right: 5px;
        position: relative;
    }

        #large-image-container::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

    .zoom-image {
        position: absolute;
        top: 0;
        left: 0;
        display: none;
        width: 100%;
        height: 100%;
        object-fit: contain;
        pointer-events: none;
        z-index: 2;
    }

    .image-container:hover .zoom-image {
        display: block;
    }

    #large-image-container {
        margin-right: 5px;
    }

    .button {
        background-color: white;
        border-radius: 5px;
    }
</style>
<section class="py-5">
    <div class="container">
        <div class="row gx-5">
            <aside class="col-lg-6">
                <div class="border rounded-4 mb-3 d-flex justify-content-center">
                    <a id="large-image-a" data-fslightbox="mygallery" class="rounded-4" target="_blank" data-type="image" href="@url">
                        <div id="large-image-container">
                            @if (Model.Discount.IsDiscount)
                            {
                                <!-- Sale badge-->
                                <div class="badge bg-dark text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Sale</div>
                            }
                            <img id="large-image" style="max-width: 100%; max-height: 100vh; margin: auto;" class="rounded-4 fit" src="@url" />
                        </div>
                        <img id="large-image-zoom" class="zoom-image" src="@url" />
                    </a>
                </div>
                <div class="d-flex justify-content-center mb-3">
                    @foreach (var item in Model.ImgUrls)
                    {
                        <div class="image-container">
                            <img src="@item" data-zoom-image="@item" onclick="toggleImageSize(this)" />
                        </div>
                    }

                </div>
            </aside>
            <main class="col-lg-6">
                <div class="ps-lg-3">
                    <h4 class="title text-dark">
                        @Model.Type for @Model.Make @Model.Model
                    </h4>
                    <div class="d-flex flex-row my-3">
                        <div class="text-warning mb-1 me-2">
                            @* Display the average rating with stars *@
                            @for (int i = 0; i < Math.Floor(Model.Rating); i++)
                            {
                                <i class="fa fa-star"></i>
                            }
                            @if (Model.Rating % 1 > 0)
                            {
                                <i class="fas fa-star-half-alt"></i>
                            }
                            @for (int i = 0; i < 5 - Math.Ceiling(Model.Rating); i++)
                            {
                                <i class="far fa-star"></i>
                            }
                            <span class="ms-1">
                                @Model.Rating.ToString("0.0")
                            </span>
                        </div>
                        <span style="margin-right: 5px" class="text-muted"><i class="fas fa-shopping-basket fa-sm mx-1"></i>154 orders</span>

                        @if (Model.Quantity >= 3)
                        {
                            <span style="color: limegreen">In stock</span>
                        }
                        else if (Model.Quantity > 0 && Model.Quantity < 3)
                        {
                            <span style="color: orange">@Model.Quantity in stock</span>
                        }
                        else
                        {
                            <span style="color: red">Out of stock</span>
                        }

                    </div>

                    <div class="mb-3">
                        @if (Model.Discount.IsDiscount)
                        {
                            <span class="text-muted text-decoration-line-through h6">@Model.Price BGN</span>
                            <span class="h5">@discountPrice.ToString("F2") BGN</span>
                        }
                        else
                        {
                            <span class="h5">@Model.Price.ToString("F2") BGN</span>
                            
                        }
                    </div>

                    <p>@Model.Description</p>

                    <div class="row">
                        <dt class="col-3">Type:</dt>
                        <dd class="col-9">@Model.Type</dd>
                        @if (Model.Color != null)
                        {
                            <dt class="col-3">Color</dt>
                            <dd class="col-9">@Model.Color</dd>
                        }

                        <dt class="col-3">Material</dt>
                        <dd class="col-9">@Model.Material</dd>
                    </div>

                    <hr />

                    <div class="row mb-4">
                        @if (Model.Color != null)
                        {
                            <div class="col-md-4 col-6"><!--TO DO: Make the logic for the color :)-->
                                <label class="mb-2">Size</label>
                                <select id="ColorSelect"class="form-select border border-secondary form-select" style="height: 35px;">
                                   <option value="@Model.Id">@Model.Color</option>
                                   @foreach (var color in Model.Colors)
                                    {
                                        if (color.ColorName != Model.Color)
                                        {
                                      <option value="@color.ProductId">@color.ColorName</option>
                                        }
                                    }
                                </select>
                            </div>

                        }
                        <a asp-controller="Shop" asp-action="Details" asp-route-id="HELP" style="display: none" id="ColorHelper"></a>
                        <!-- col.// -->
                        <div class="col-md-4 col-6 mb-3">
                            <label class="mb-2 d-block">Quantity</label>
                            <div class="input-group mb-3" style="width: 170px;">
                                <button class="button border border-secondary px-3" type="button" id="button-addon1" data-mdb-ripple-color="dark" onclick="minusOneQuantity()">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input id="quantityText" type="text" class="form-control text-center border border-secondary" value="1" aria-label="Example text with button addon" aria-describedby="button-addon1" />
                                <input id="quantityHelper" style="display:none" value="@Model.Quantity"/>
                                <button class="button border border-secondary px-3" type="button" id="button-addon2" data-mdb-ripple-color="dark" onclick="plusOneQuantity()">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    @if (Model.Quantity > 0)
                    {
                        if (SignInManager.IsSignedIn(User))
                        {
                        <a asp-controller="ShoppingCart" asp-action="Fixer" asp-route-id="@Model.Id" asp-route-quantity="QUANTITY_HERE" class="btn btn-warning shadow-0" id="buyNowButton"> Buy now </a>
                        <a asp-controller="ShoppingCart" asp-action="AddToCart" asp-route-id="@Model.Id" asp-route-quantity="QUANTITY_HERE" id="ShoppingCartBtn" class="btn btn-primary shadow-0"> <i class="me-1 fa fa-shopping-basket"></i> Add to cart </a>
                        }
                        else
                        {
                        <a asp-controller="Order" asp-action="CheckoutWitoutProfile" asp-route-id="@Model.Id" asp-route-quantity="QUANTITY_HERE" id="BuyNowBtn" class="btn btn-warning shadow-0"> Buy now </a>
                        }
                    }
                    else
                    {
                        <a asp-controller="Home" asp-action="Contact" class="btn btn-danger shadow-0">Ask for item</a>
                    }

                    @if (User.IsInRole("Admin"))
                    {
                        <a id="hellper" asp-controller="Admin" asp-action="EditProduct" asp-route-id="@Model.Id" class="btn btn-warning shadow-0"> Edit </a>
                        <a asp-controller="Admin" asp-action="DeleteProduct" asp-route-id="@Model.Id" class="btn btn-danger shadow-0">Delete</a>

                    }
                </div>
            </main>
        </div>
    </div>
</section>
@if (SignInManager.IsSignedIn(User))
{
    <h2>Rate this Product</h2>
    <form id="ratingForm" asp-controller="Shop" asp-action="AddRating" asp-route-id="@Model.Id">
        <select name="ratingValue" class="form-select">
            <option value="1">1 star</option>
            <option value="2">2 stars</option>
            <option value="3">3 stars</option>
            <option value="4">4 stars</option>
            <option value="5">5 stars</option>
        </select>
        <button type="submit" class="btn btn-outline-dark mt-2">Submit Rating</button>
    </form>
}
<div class="row d-flex justify-content-center">
    <div class="col-md-8 col-lg-6">
        <div class="card shadow-0 border" style="background-color: #f0f2f5;">
            <div class="card-body p-4">
                <form method="post">
                    <div class="form-outline mb-4">
                        <h2>Comments</h2>
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <input id="commentInput" type="text" name="comment" class="form-control" placeholder="Type comment..." />
                            <input name="content" id="helpper" style="display: none" />
                            <input id="usernameInput" style="display: none" value="@User.GetUsername()" />
                            <div class="text-center" style="margin: 10px">
                                <button asp-controller="Shop" asp-action="AddComment" asp-route-id="@Model.Id" asp-route-username="@User.GetUsername()" asp-route-ownerId="@User.GetId()" id="addComment" type="submit" class="btn btn-outline-dark mt-auto">Add Comment</button>
                            </div>
                        }
                    </div>
                    <div id="commentsList">

                        @foreach (var comment in Model.Comments)
                        {
                            <partial name="_CommentPartial" model="comment"></partial>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js//CommentSingleR.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>

<script>
    $(document).ready(function () {
        $('#ShoppingCartBtn').click(function (event) {
            var quantityInput = document.getElementById('quantityText');
            var shoppingCartBtn = $('#ShoppingCartBtn');
            var newQuantity = parseInt(quantityInput.value);

            var currentHref = shoppingCartBtn.attr('href');
            var newHref = currentHref.replace("QUANTITY_HERE", encodeURIComponent(newQuantity));

            shoppingCartBtn.attr('asp-route-quantity', newQuantity);
            shoppingCartBtn.attr('href', newHref);
            console.log(shoppingCartBtn.attr('href'));
        });
    });
    $(document).ready(function () {
        $('#buyNowButton').click(function (event) {
            var quantityInput = document.getElementById('quantityText');
            var BuyNowBtn = $('#buyNowButton');
            var newQuantity = parseInt(quantityInput.value);

            var currentHref = BuyNowBtn.attr('href');
            var newHref = currentHref.replace("QUANTITY_HERE", encodeURIComponent(newQuantity));

            BuyNowBtn.attr('asp-route-quantity', newQuantity);
            BuyNowBtn.attr('href', newHref);
            console.log(BuyNowBtn.attr('href'));
        });
    });


    $(document).ready(function () {
        $('#BuyNowBtn').click(function (event) {
            var quantityInput = document.getElementById('quantityText');
            var BuyNowBtn = $('#BuyNowBtn');
            var newQuantity = parseInt(quantityInput.value);

            var currentHref = BuyNowBtn.attr('href');
            var newHref = currentHref.replace("QUANTITY_HERE", encodeURIComponent(newQuantity));

            BuyNowBtn.attr('asp-route-quantity', newQuantity);
            BuyNowBtn.attr('href', newHref);
            console.log(shoppingCartBtn.attr('href'));
        });
    });


    $(document).ready(function () {
        $('#ColorSelect').change(function () {
            var selectedValue = $(this).val();
            var helperLink = document.getElementById('ColorHelper');
            var currentHref = helperLink.href;
            var newHref = currentHref.replace("HELP", encodeURIComponent(selectedValue));
            helperLink.setAttribute("asp-route-id", selectedValue);
            helperLink.href = newHref;
            helperLink.click();
        });
    });

    $(document).ready(function () {
        // Trigger the elevateZoom function after the page has loaded
        $('#large-image').elevateZoom();
    });
    function toggleImageSize(clickedImage) {
        var largeImage = document.getElementById("large-image");
        var previousImage = document.querySelector(".image-container img.active");
        var largeImageAnchor = document.getElementById("large-image-a");

        // Remove active class from previously active image
        if (previousImage) {
            previousImage.classList.remove("active");
        }

        // Add active class to the clicked image
        clickedImage.classList.add("active");

        // Update the large image source and zoom image
        largeImage.src = clickedImage.src;
        largeImageAnchor.href = clickedImage.src;
        $(largeImage).data('zoom-image', clickedImage.dataset.zoomImage).elevateZoom();
    }
    }
    function minusOneQuantity() {
        var text = document.getElementById("quantityText");
        var quantity = parseInt(text.value);
        if (quantity <= 1) {
            return;
        }
        text.value = quantity - 1;
    }
    function plusOneQuantity() {
        var text = $("#quantityText"); 
        var maxQuantity = parseInt($("#quantityHelper").val());
        var currentValue = parseInt(text.val()); 
        if (currentValue < maxQuantity) {
            text.val(currentValue + 1);
        }
    }

</script>